<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visual Computing</title><link>https://juarodriguezc.github.io/VisualComputing/docs/workshops/</link><description>Recent content on Visual Computing</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://juarodriguezc.github.io/VisualComputing/docs/workshops/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://juarodriguezc.github.io/VisualComputing/docs/workshops/coordinate_spaces/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://juarodriguezc.github.io/VisualComputing/docs/workshops/coordinate_spaces/</guid><description>Aplicación de dibujo 3d con la mano # Introducción # El siguiente trabajo nace depués de observar diferentes proyectos que, haciendo uso de librerías como treegl, logran ser apilcaciones para dibujar en 3 dimensiones. El reto que nos propusimos fue intentar cambiar la interfaz convencional para este tipo de aplicaciones (un mouse) por otra más innovadora como puede ser el caso de nuestra mano, la misma que utilizaban intuitivamente nuestros ancestros para hacer pinturas rupestres.</description></item><item><title/><link>https://juarodriguezc.github.io/VisualComputing/docs/workshops/masking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://juarodriguezc.github.io/VisualComputing/docs/workshops/masking/</guid><description>Visual masking # Incluir teoría acerca de visual masking
Image kernels # Teoría # Aplicación # Masking //Global variables //Bar variables let barWidth = 65, barHeight = 22; let dir = false, moveR = true, showBars = true, showGuide = false; let speedR = 5; let xPos = 0, yPos = 180, yDif = 100; let barsFoot = 4; //Color selector let colorOptions = [&amp;#39;blue-yellow&amp;#39;, &amp;#39;red-green&amp;#39;, &amp;#39;grey&amp;#39;]; let colorOptionsInv = { &amp;#39;blue-yellow&amp;#39;:0, &amp;#39;red-green&amp;#39;:1, &amp;#39;grey&amp;#39;:2 } let colors = [[&amp;#34;#000099&amp;#34;,&amp;#34;#F2F200&amp;#34;],[&amp;#34;#4C0000&amp;#34;,&amp;#34;#00E500&amp;#34;],[&amp;#34;#000000&amp;#34;,&amp;#34;#FFF&amp;#34;]] let barColors = [[&amp;#34;#000&amp;#34;,&amp;#34;#FFF&amp;#34;],[&amp;#34;#333&amp;#34;,&amp;#34;#CCC&amp;#34;],[&amp;#34;#000&amp;#34;,&amp;#34;#FFF&amp;#34;]] //Menu variables let menuWidth = 130; let selColor; let colorSelected = 0; let sliderBars; let sliderSpeed; let chbMove; let chbBars; let chbGuide; function setup() { frameRate(60); createCanvas(705, 475); //Create the color selector selColor = createSelect(); for(var option in colorOptions) selColor.</description></item><item><title/><link>https://juarodriguezc.github.io/VisualComputing/docs/workshops/optical_illusions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://juarodriguezc.github.io/VisualComputing/docs/workshops/optical_illusions/</guid><description>Illusiones ópticas # Stepping feet Motion Illusion # Teoría # En esta ilusión podemos observar que dos carros se mueve a través de una rejilla y diese la impresión de que cada uno avanza en momentos distintos. Sin embargo, una vez se activa la ayuda, se puede ver que realmente avanzan al tiempo. Esta ilusión se genera gracias a que el color de los carros se mezcla con la rejilla presente dando así la sensación que los carros se detienen cuando alcanzan una varilla de la rejilla; sin embargo si se juega con el contraste de los colores de este montaje se puede ver cómo la ilusión va perdiendo efecto.</description></item></channel></rss>