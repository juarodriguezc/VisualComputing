<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Visual Computing</title><link>https://juarodriguezc.github.io/VisualComputing/</link><description>Recent content in Introduction on Visual Computing</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://juarodriguezc.github.io/VisualComputing/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a New Theme</title><link>https://juarodriguezc.github.io/VisualComputing/posts/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>https://juarodriguezc.github.io/VisualComputing/posts/creating-a-new-theme/</guid><description>Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description></item><item><title>Migrate to Hugo from Jekyll</title><link>https://juarodriguezc.github.io/VisualComputing/posts/migrate-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://juarodriguezc.github.io/VisualComputing/posts/migrate-from-jekyll/</guid><description>Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description></item><item><title>(Hu)go Template Primer</title><link>https://juarodriguezc.github.io/VisualComputing/posts/goisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://juarodriguezc.github.io/VisualComputing/posts/goisforlovers/</guid><description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description></item><item><title>Getting Started with Hugo</title><link>https://juarodriguezc.github.io/VisualComputing/posts/hugoisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://juarodriguezc.github.io/VisualComputing/posts/hugoisforlovers/</guid><description>Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:</description></item><item><title/><link>https://juarodriguezc.github.io/VisualComputing/docs/workshops/coordinate_spaces/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://juarodriguezc.github.io/VisualComputing/docs/workshops/coordinate_spaces/</guid><description>Aplicación de dibujo 3d con la mano # Introducción # El siguiente trabajo nace depués de observar diferentes proyectos que, haciendo uso de librerías como treegl, logran ser apilcaciones para dibujar en 3 dimensiones. El reto que nos propusimos fue intentar cambiar la interfaz convencional para este tipo de aplicaciones (un mouse) por otra más innovadora como puede ser el caso de nuestra mano, la misma que utilizaban intuitivamente nuestros ancestros para hacer pinturas rupestres.</description></item><item><title/><link>https://juarodriguezc.github.io/VisualComputing/docs/workshops/masking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://juarodriguezc.github.io/VisualComputing/docs/workshops/masking/</guid><description>Visual masking # Incluir teoría acerca de visual masking
Image kernels # Teoría # Aplicación # Masking //Global variables //Bar variables let barWidth = 65, barHeight = 22; let dir = false, moveR = true, showBars = true, showGuide = false; let speedR = 5; let xPos = 0, yPos = 180, yDif = 100; let barsFoot = 4; //Color selector let colorOptions = [&amp;#39;blue-yellow&amp;#39;, &amp;#39;red-green&amp;#39;, &amp;#39;grey&amp;#39;]; let colorOptionsInv = { &amp;#39;blue-yellow&amp;#39;:0, &amp;#39;red-green&amp;#39;:1, &amp;#39;grey&amp;#39;:2 } let colors = [[&amp;#34;#000099&amp;#34;,&amp;#34;#F2F200&amp;#34;],[&amp;#34;#4C0000&amp;#34;,&amp;#34;#00E500&amp;#34;],[&amp;#34;#000000&amp;#34;,&amp;#34;#FFF&amp;#34;]] let barColors = [[&amp;#34;#000&amp;#34;,&amp;#34;#FFF&amp;#34;],[&amp;#34;#333&amp;#34;,&amp;#34;#CCC&amp;#34;],[&amp;#34;#000&amp;#34;,&amp;#34;#FFF&amp;#34;]] //Menu variables let menuWidth = 130; let selColor; let colorSelected = 0; let sliderBars; let sliderSpeed; let chbMove; let chbBars; let chbGuide; function setup() { frameRate(60); createCanvas(705, 475); //Create the color selector selColor = createSelect(); for(var option in colorOptions) selColor.</description></item><item><title/><link>https://juarodriguezc.github.io/VisualComputing/docs/workshops/optical_illusions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://juarodriguezc.github.io/VisualComputing/docs/workshops/optical_illusions/</guid><description>Illusiones ópticas # Stepping feet Motion Illusion # Teoría # En esta ilusión podemos observar que dos carros se mueve a través de una rejilla y diese la impresión de que cada uno avanza en momentos distintos. Sin embargo, una vez se activa la ayuda, se puede ver que realmente avanzan al tiempo. Esta ilusión se genera gracias a que el color de los carros se mezcla con la rejilla presente dando así la sensación que los carros se detienen cuando alcanzan una varilla de la rejilla; sin embargo si se juega con el contraste de los colores de este montaje se puede ver cómo la ilusión va perdiendo efecto.</description></item><item><title/><link>https://juarodriguezc.github.io/VisualComputing/docs/workshops/shaders/coloring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://juarodriguezc.github.io/VisualComputing/docs/workshops/shaders/coloring/</guid><description>Shaders # Coloring # sketch.js let colorShader; let cmy; let v1, v2, v3; let uMaterial1, uMaterial2; // Color picker let colorPickerL, colorPickerR; const colorL = &amp;#34;#CC804D&amp;#34;; const colorR = &amp;#34;#E61A66&amp;#34;; function preload() { // The vertex shader defines how vertices are projected onto clip space. // Most of the times a projection and modelview matrix are needed for it: // https://visualcomputing.github.io/docs/shaders/programming_paradigm/ // Here, however, we are going to: // 1.</description></item><item><title/><link>https://juarodriguezc.github.io/VisualComputing/docs/workshops/shaders/image_processing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://juarodriguezc.github.io/VisualComputing/docs/workshops/shaders/image_processing/</guid><description>Shaders # Image processing # Una de las tareas más comunes e importantes dentro de la computación es el procesamiento de imágenes. Hoy en día tiene importantes aplicaciones en diferentes campos como Machine Learning, teniendo en cuenta que sirve para darle ojos a las computadoras. Tiene varias aplicaciones:
Imágenes médicas Seguridad (cámaras) Fuerzas militares y defensas Restauración de imágenes A continuación presentamos un ejemplo de procesamiento de imágenes donde presentamos una imagen y un video al que se le aplican unos shaders para que el procesamiento sea bastante más rápido.</description></item><item><title/><link>https://juarodriguezc.github.io/VisualComputing/docs/workshops/shaders/non_euclidian_geometry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://juarodriguezc.github.io/VisualComputing/docs/workshops/shaders/non_euclidian_geometry/</guid><description>Shaders # Non Euclidian Geometry # Ejemplo del profesor # sketch.js let easycam; let edge = 80; let scooter; let scooterTex; let amogus; let amogusTex; let texShader; let path = &amp;#39;/VisualComputing/sketches/workshop3/nonEuclidian1&amp;#39; function preload() { // no varyings need to be emitted from the vertex shader texShader = readShader(path+&amp;#39;/shader.frag&amp;#39;, { varyings: Tree.NONE }); amogus = loadModel(path+&amp;#39;/models/amogus.obj&amp;#39;, true); scooter = loadModel(path+&amp;#39;/models/scooter.obj&amp;#39;, true); } function setup() { createCanvas(400, 400, WEBGL); // no need to normalize the texture // textureMode(NORMAL); shader(texShader); // resolution will be used to sample the offscreen textures emitResolution(texShader); easycam = createEasyCam(); scooterTex = createGraphics(width, height, WEBGL); amogusTex = createGraphics(width, height, WEBGL); } function draw() { // 1.</description></item><item><title/><link>https://juarodriguezc.github.io/VisualComputing/docs/workshops/shaders/procedural_texturing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://juarodriguezc.github.io/VisualComputing/docs/workshops/shaders/procedural_texturing/</guid><description>Shaders # Procedural Texturing # Este trabajo se realizó sacando como base la información expuesta en The book of shaders. La idea de este ejercicio es mostrar cómo se puede aplicar una textura a un cuerpo (en este caso un cilindro) con shaders.
Lo interesante es que se puede jugar con un patrón para rellenar el objeto y esto genera texturas muy interesantes.
sketch.js let pg; let truchetShader; let img; let lastMouse = 0; path = &amp;#39;/VisualComputing/sketches/workshop3/ProceduralTexturing&amp;#39; function preload() { // shader adapted from here: https://thebookofshaders.</description></item></channel></rss>